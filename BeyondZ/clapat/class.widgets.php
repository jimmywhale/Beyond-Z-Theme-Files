<?php/* Tabbed content widget class */class IonutTabbedContent_Widget extends WP_Widget {    function IonutTabbedContent_Widget() {        $widget_ops = array('classname' => 'widget_ionuttabs', 'description' => __('Displays tabbed recent content inside tabs') );        $this->WP_Widget('IonutTabContent-widget', __('Tabbed recent content'), $widget_ops);    }     function form($instance) {		$instance = wp_parse_args( (array) $instance, array('title' => '') );		$title = strip_tags($instance['title']);		$number = $this->number;		$ThemeRoot = get_template_directory_uri();		?>		Title: <small>(widget title)</small><br>		<input type="text"  name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>"><br>		<?php    }     function update($new_instance, $old_instance) {        $instance 			= $old_instance;		$instance['title'] 	= strip_tags($new_instance['title']);    return $instance;    }     function widget($args, $instance) {		extract($args);		extract($instance);		$show_reply = 1;		echo $before_widget;		if(strlen($title) > 0){			echo $before_title;				echo $title;			echo $after_title;			}			$posts = get_posts(array('number'=>5));			$comments = get_comments(array('number'=>3));			$rand = rand(100,999);			// var_dump($comments);		?><div class="tab-inside clapat-tabs"><ul class="">	<li><a href="#wgt-posts<?php echo $rand; ?>"><?php _e('Recent','clapat');?></a></li>	<li><a href="#wgt-comments<?php echo $rand; ?>"><?php _e('Comments','clapat');?></a></li></ul><div class="list-wrap">	<div id="wgt-posts<?php echo $rand; ?>">	<?php		if(count($posts) > 0){			foreach($posts as $p){				echo '				<div class="widget-comment">					<a href="'.get_permalink($p->ID).'" class="link"><strong>'.$p->post_title.'</strong></a><br>					<span class="date">'.date('F d,Y', strtotime($p->post_date_gmt)).'</span>				</div>				';			}		}		?>	</div>	<div id="wgt-comments<?php echo $rand; ?>">		<?php		if(count($comments) > 0){			foreach($comments as $c){				$page = get_page($c->comment_post_ID, OBJECT, 'display');				echo '				<div class="widget-comment">					<a href="'.get_permalink($c->comment_post_ID).'#comments" class="link"><strong>'.$c->comment_author.'</strong> '.__('on','clapat').' <strong>'.$page->post_title.'</strong></a><br>					<span class="date">'.date('F d,Y', strtotime($c->comment_date_gmt)).'</span>				</div>				';			}		}		?>	</div></div></div>		<?php		echo $after_widget;    }}/* Ad widget class */class IonutAd_Widget extends WP_Widget {    function IonutAd_Widget() {        $widget_ops = array('classname' => 'widget_ionutad', 'description' => __('Displays ads on widget areas') );        $this->WP_Widget('IonutAd-widget', __('Eleven Ad'), $widget_ops);    }     function form($instance) {        //  Assigns values		$instance = wp_parse_args( (array) $instance, array('title' => 'Sponsor') );		$title = strip_tags(@$instance['title']);		$size = strip_tags(@$instance['size']);		$img = isset($instance['img'])? $instance['img'] : array();		$alt = isset($instance['alt'])? $instance['alt'] : array();		$url = isset($instance['url'])? $instance['url'] : array();		$number = $this->number;		$ThemeRoot = get_template_directory_uri();		?>		Title: <small>(widget title)</small><br>		<input type="text"  name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>"><br>		Ad size:<br>		<input type="radio" name="<?php echo $this->get_field_name('size'); ?>" value="1" <?php echo (!isset($size) || $size == '1')? 'checked="checked"':''; ?>> Small<br>		<input type="radio" name="<?php echo $this->get_field_name('size'); ?>" value="2" <?php echo (isset($size) && $size == '2')? 'checked="checked"':''; ?>> Big<br>				<a href="#" onClick="newAd('#adsCt-<?php echo $number; ?>')">New ad</a>		<div id="adsCt-<?php echo $number; ?>">		<?php for($i=0;$i<count($img);$i++):?>		<div class="ad">			Ad image:<br>			<input type="text"  name="<?php echo $this->get_field_name('img'); ?>[]" value="<?php echo @$img[$i]; ?>" class="upload_image" value=""> <img class="upload_image_button" src="<?php echo $ThemeRoot; ?>/images/admin/eye.png"><br>			Ad description:<br>			<input type="text"  name="<?php echo $this->get_field_name('alt'); ?>[]" value="<?php echo @$alt[$i]; ?>"><br>			Ad url:<br>			<input type="text"  name="<?php echo $this->get_field_name('url'); ?>[]" value="<?php echo @$url[$i]; ?>"><br>						<a href="#" class="close Xclose">X</a>		</div>		<?php endfor; ?>		</div>	<style>.Xclose {  width:16px; height:16px; text-decoration:none; font-size:14px; font-weight:bold; color:#000; position:absolute; top:2px; right:0; }.ad { margin:5px 0; padding:5px; position:relative; border:1px dotted #ccc; background:#f7f7f7; }.ad.ui-sortable-helper { cursor:pointer; background:#ffffcc; }</style>	<script>function newAd(container, append){	var $ = jQuery;	var temp = '<div class="ad">Ad image:<br><input type="text"  name="<?php echo $this->get_field_name('img'); ?>[]" class="upload_image" value=""> 	<img class="upload_image_button" src="<?php echo $ThemeRoot; ?>/images/admin/eye.png"><br>Ad description:<br><input type="text"  name="<?php echo $this->get_field_name('alt'); ?>[]"><br>Ad url:<br><input type="text"  name="<?php echo $this->get_field_name('url'); ?>[]"><br><a href="#" class="close Xclose">X</a></div>	';	if($(container).length > 0){		if(typeof append == "undefined"){			$(container).prepend(temp);		}else {			$(container).append(temp);		}	}}jQuery(function($){$('#adsCt-<?php echo $number; ?>').sortable();$(".Xclose").live("click", function(e){		e.preventDefault();		e.stopPropagation();		$(this).parent().fadeOut(function(){ $(this).remove()});});			var lastOpenedObject = false;			jQuery(".upload_image_button, .upload_image_prev").live("click", function(e) {				e.preventDefault();				if($(this).hasClass("upload_image_prev")){					lastOpenedObject = jQuery(this).next(".upload_image");				}else {					lastOpenedObject = jQuery(this).prev(".upload_image");				}			 formfield = lastOpenedObject.attr("name");			 tb_show("", "media-upload.php?type=image&amp;TB_iframe=true");			 return false;			});			window.send_to_editor = function(html) {			 imgurl = jQuery("img",html).attr("src");			// console.log(lastOpenedObject);			 if(lastOpenedObject != false){				lastOpenedObject.val(imgurl);				lastOpenedObject.prev().html('<img src="'+imgurl+'" width="100%">');			}			 tb_remove();			}})</script>				<?php    }     function update($new_instance, $old_instance) {        $instance 			= $old_instance;		$instance['title'] 	= strip_tags($new_instance['title']);		$instance['url'] 	= $new_instance['url'];		$instance['img'] 	= $new_instance['img'];		$instance['alt'] 	= $new_instance['alt'];		$instance['size'] 	= $new_instance['size'];    return $instance;    }     function widget($args, $instance) {		extract($args);		extract($instance);	//	$content = ClapatShortcode::getTweets($account);	$content = '???';		$show_reply = 1;		if(isset($content) && $content != null && !isset($content->error)){		echo $before_widget;			echo $before_title;				echo $title;			echo $after_title;		//	var_dump($alt);			echo ' <ul class="wrap_IonutAds ad-container '.((isset($size) && $size == '2')?'big':'small').'">';			//	var_dump($content);				$found = 0;				for($i=0;$i<count($img);$i++){					echo '<li '.(($i%2 == 1)?'class="last"':'').'><a href="'.$url[$i].'" target="_blank"><img src="'.$img[$i].'" alt="'.$alt[$i].'"></a></li>';				}					echo ' </ul>';		echo $after_widget;		} else {			if(WP_DEBUG == true) {				echo 'Ads widget error !!';			}		}    } }class IonutTwitter_Widget extends WP_Widget {    function IonutTwitter_Widget() {        $widget_ops = array('classname' => 'widget_ionuttwitter', 'description' => __('Displays new eleven twitter widget') );        $this->WP_Widget('IonutTwitter-widget', __('Eleven Tweeter'), $widget_ops);    }     function form($instance) {        //  Assigns values		$instance = wp_parse_args( (array) $instance, array('account' => 'envato', 'title' => 'Twitter feed', 'limit' => 5) );		$account = strip_tags($instance['account']);		$title = strip_tags($instance['title']);		$limit = strip_tags($instance['limit']);		$number = $this->number;		?>		Title: <small>(widget title)</small><br>		<input type="text"  name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>"><br>		Account: <small>(without @)</small><br>		<input type="text"  name="<?php echo $this->get_field_name('account'); ?>" value="<?php echo $account; ?>"><br>		Tweets number:<br>		<input type="text"  name="<?php echo $this->get_field_name('limit'); ?>" value="<?php echo $limit; ?>"><br>		<?php    }     function update($new_instance, $old_instance) {        $instance = $old_instance;		$instance['account'] = strip_tags($new_instance['account']);		$instance['title'] = strip_tags($new_instance['title']);		$instance['limit'] = strip_tags($new_instance['limit']);    return $instance;    }     function widget($args, $instance) {		extract($args);		extract($instance);		$content = ClapatShortcode::getTweets($account);		$show_reply = 1;		if(isset($content) && $content != null && !isset($content->error)){		echo $before_widget;			echo $before_title;				echo $title;			echo $after_title;						echo ' <ul class="wrap_IonutTwitter">';			//	var_dump($content);				$found = 0;				if(count($content) > 0){					$out = '';					foreach($content as $tweet){						if($found < $limit){							$srid = (int) $tweet->in_reply_to_user_id;							if($srid == 0 || $show_reply == '1'){								$date = date('F dS, Y', strtotime($tweet->created_at));								$author = (isset($tweet->user->screen_name))? $tweet->user->screen_name : '';								$text = (isset($tweet->text))? $tweet->text : '';								$out .= '								<li class="tweet-widget group" id="twt-'.$tweet->in_reply_to_status_id.'">								<i class="icon-twitter fa fa-twitter float-left"></i>								<div>									<p>'.$text.'</p>									<p class="white"><a href="http://twitter.com/'.$author.'" target="_blank">http://twitter.com/'.$author.'</a></p>								</div>								</li>';								$found++;							}						}					}				}				echo $out;			echo ' </ul>';		echo $after_widget;		} else {			if(WP_DEBUG == true) {				echo 'Twitter widget error !!';			}		}    } }class IonutFlickr_Widget extends WP_Widget {	public function __construct() {		parent::__construct( 'flickr-gallery-widget', 'Flickr Gallery Widget', array(			'description' => 'Display up to 20 of your latest Flickr submissions in your sidebar.',		) );	}	/**	 * Displays the widget contents.	 */	public function widget( $args, $instance ) {		extract( $args );		$title = apply_filters( 'widget_title', $instance['title'] );		echo $args['before_widget'];		if ( ! empty( $title ) )			echo $args['before_title'] . $title . $args['after_title'];		$photos = $this->get_photos( array(			'username' => $instance['username'],			'count' => $instance['count'],			'tags' => $instance['tags'],		) );		if ( is_wp_error( $photos ) ) {			echo $photos->get_error_message();		} else {			foreach ( $photos as $photo ) {				$link = esc_url( $photo->link );				$src = esc_url( $photo->media->m );				$title = esc_attr( $photo->title );				$item = sprintf( '<a href="%s"><img src="%s" alt="%s" /></a>', $link, $src, $title );				$item = sprintf( '<div class="clapat-flickr-item">%s</div>', $item );				echo $item;			}		}		echo $args['after_widget'];	}	private function get_photos( $args = array() ) {		$transient_key = md5( 'clapat-flickr-cache-' . print_r( $args, true ) );		$cached = get_transient( $transient_key );		if ( $cached )			return $cached;		$username = isset( $args['username'] ) ? $args['username'] : '';		$tags = isset( $args['tags'] ) ? $args['tags'] : '';		$count = isset( $args['count'] ) ? absint( $args['count'] ) : 10;		$query = array(			'tagmode' => 'any',			'tags' => $tags,		);		// If username is an RSS feed		if ( preg_match( '#^https?://api\.flickr\.com/services/feeds/photos_public\.gne#', $username ) ) {			$url = parse_url( $username );			$url_query = array();			wp_parse_str( $url['query'], $url_query );			$query = array_merge( $query, $url_query );		} else {			$user = $this->request( 'flickr.people.findByUsername', array( 'username' => $username ) );			if ( is_wp_error( $user ) )				return $user;			$user_id = $user->user->id;			$query['id'] = $user_id;		}		$photos = $this->request_feed( 'photos_public', $query );		if ( ! $photos )			return new WP_Error( 'error', 'Could not fetch photos.' );		$photos = array_slice( $photos, 0, $count );		set_transient( $transient_key, $photos, apply_filters( 'clapat_flickr_widget_cache_timeout', 3600 ) );		return $photos;	}	private function request( $method, $args ) {		$args['method'] = $method;		$args['format'] = 'json';		$args['api_key'] = 'd348e6e1216a46f2a4c9e28f93d75a48';		$args['nojsoncallback'] = 1;		$url = esc_url_raw( add_query_arg( $args, 'http://api.flickr.com/services/rest/' ) );		$response = wp_remote_get( $url );		if ( is_wp_error( $response ) )			return false;		$body = wp_remote_retrieve_body( $response ); 		$obj = json_decode( $body );		if ( $obj && $obj->stat == 'fail' )			return new WP_Error( 'error', $obj->message );		return $obj ? $obj : false;	}	private function request_feed( $feed = 'photos_public', $args = array() ) {		$args['format'] = 'json';		$args['nojsoncallback'] = 1;		$url = sprintf( 'http://api.flickr.com/services/feeds/%s.gne', $feed );		$url = esc_url_raw( add_query_arg( $args, $url ) );		$response = wp_remote_get( $url );		if ( is_wp_error( $response ) )			return false;				$body = wp_remote_retrieve_body( $response );		$body = preg_replace( "#\\\\'#", "\\\\\\'", $body ); 		$obj = json_decode( $body );		return $obj ? $obj->items : false;	}	public function update( $new_instance, $old_instance ) {		$instance = array();		$instance['title'] = strip_tags( $new_instance['title'] );		$instance['username'] = strip_tags( $new_instance['username'] );		$instance['tags'] = strip_tags( $new_instance['tags'] );		$instance['count'] = absint( $new_instance['count'] );		return $new_instance;	}		public function form( $instance ) {		$title = isset( $instance['title'] ) ? $instance['title'] : 'My photos';		$username = isset( $instance['username'] ) ? $instance['username'] : '';		$tags = isset( $instance['tags'] ) ? $instance['tags'] : '';		$count = isset( $instance['count'] ) ? absint( $instance['count'] ) : 4;		?>		<p>			<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 			<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id( 'username' ); ?>"><?php _e( 'Username or RSS:' ); ?></label> 			<input class="widefat" id="<?php echo $this->get_field_id( 'username' ); ?>" name="<?php echo $this->get_field_name( 'username' ); ?>" type="text" value="<?php echo esc_attr( $username ); ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id( 'tags' ); ?>"><?php _e( 'Tags:' ); ?></label> 			<input class="widefat" id="<?php echo $this->get_field_id( 'tags' ); ?>" name="<?php echo $this->get_field_name( 'tags' ); ?>" type="text" value="<?php echo esc_attr( $tags ); ?>" /><br />		</p>		<p>			<label for="<?php echo $this->get_field_id( 'count' ); ?>"><?php _e( 'Count:' ); ?></label><br />			<input type="number" min="1" max="20" value="<?php echo esc_attr( $count ); ?>" id="<?php echo $this->get_field_id( 'count' ); ?>" name="<?php echo $this->get_field_name( 'count' ); ?>" />		</p>		<?php	}}add_action('widgets_init', 'register_eleven_widgets');function register_eleven_widgets() {    register_widget('IonutTwitter_Widget');	register_widget('IonutFlickr_Widget' );	register_widget('IonutAd_Widget' );	register_widget('IonutTabbedContent_Widget' );}